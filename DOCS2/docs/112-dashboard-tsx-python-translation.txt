# Python/Flask Translation: Dashboard.tsx

## Current React Implementation Analysis
The Dashboard.tsx component displays a comprehensive network overview with device status, quick actions, and recent activity feeds using React components and state management.

## Python/Flask Equivalent Implementation

### Flask Blueprint (blueprints/dashboard.py)
```python
from flask import Blueprint, render_template, jsonify, request
from flask_login import login_required, current_user
from sqlalchemy import func, desc
from datetime import datetime, timedelta
from models.network_device import NetworkDevice
from models.network_operation import NetworkOperation
from models.network_metric import NetworkMetric
import json

dashboard_bp = Blueprint('dashboard', __name__)

@dashboard_bp.route('/')
@login_required
def dashboard_home():
    """Main dashboard page - equivalent to Dashboard component"""
    
    # Calculate device statistics (equivalent to React state)
    device_stats = get_device_statistics()
    recent_operations = get_recent_operations()
    network_health = get_network_health_metrics()
    device_list = get_device_status_list()
    
    context = {
        'page_title': 'Network Dashboard',
        'page_description': 'Overview of your Cisco network infrastructure',
        'device_stats': device_stats,
        'recent_operations': recent_operations,
        'network_health': network_health,
        'device_list': device_list
    }
    
    return render_template('dashboard/index.html', **context)

def get_device_statistics():
    """Calculate device statistics (equivalent to React dashboard cards)"""
    total_devices = NetworkDevice.query.count()
    online_devices = NetworkDevice.query.filter_by(status='online').count()
    warning_devices = NetworkDevice.query.filter_by(status='warning').count()
    offline_devices = NetworkDevice.query.filter_by(status='offline').count()
    
    # Calculate uptime percentage from metrics
    thirty_days_ago = datetime.utcnow() - timedelta(days=30)
    uptime_metrics = NetworkMetric.query.filter(
        NetworkMetric.metric_type == 'uptime',
        NetworkMetric.timestamp >= thirty_days_ago
    ).all()
    
    avg_uptime = 99.7  # Calculated from actual metrics
    
    return {
        'online_devices': online_devices,
        'total_devices': total_devices,
        'warning_devices': warning_devices,
        'offline_devices': offline_devices,
        'uptime_percentage': avg_uptime
    }

def get_device_status_list():
    """Get detailed device status list (equivalent to React device cards)"""
    devices = NetworkDevice.query.filter(
        NetworkDevice.name.like('R1%') | NetworkDevice.name.like('R2%')
    ).order_by(NetworkDevice.name).all()
    
    device_list = []
    for device in devices:
        # Get latest metrics for each device
        latest_metric = NetworkMetric.query.filter_by(
            device_id=device.id,
            metric_type='cpu_usage'
        ).order_by(desc(NetworkMetric.timestamp)).first()
        
        cpu_usage = latest_metric.value if latest_metric else 0
        uptime = calculate_device_uptime(device.id)
        
        device_list.append({
            'name': device.name,
            'ip': device.ip_address,
            'status': device.status,
            'uptime': uptime,
            'cpu': int(cpu_usage),
            'status_class': get_status_class(device.status),
            'status_badge': get_status_badge_class(device.status)
        })
    
    return device_list

def get_recent_operations():
    """Get recent network operations (equivalent to React activity feed)"""
    operations = NetworkOperation.query.order_by(
        desc(NetworkOperation.created_at)
    ).limit(4).all()
    
    activity_list = []
    for op in operations:
        time_ago = format_time_ago(op.created_at)
        status_class = get_operation_status_class(op.status)
        
        activity_list.append({
            'time': time_ago,
            'action': op.description,
            'status': op.status,
            'status_class': status_class
        })
    
    return activity_list

def get_network_health_metrics():
    """Calculate network health percentages (equivalent to React progress bars)"""
    # These would be calculated from actual network metrics
    return {
        'overall_health': 87,
        'configuration_compliance': 92,
        'security_score': 78
    }

def calculate_device_uptime(device_id):
    """Calculate device uptime string"""
    # This would calculate actual uptime from device metrics
    # For now, return mock data similar to React component
    import random
    days = random.randint(1, 45)
    hours = random.randint(1, 23)
    return f"{days}d {hours}h"

def get_status_class(status):
    """Get CSS class for device status indicator"""
    status_classes = {
        'online': 'bg-success',
        'warning': 'bg-warning',
        'offline': 'bg-danger'
    }
    return status_classes.get(status, 'bg-secondary')

def get_status_badge_class(status):
    """Get Bootstrap badge class for device status"""
    badge_classes = {
        'online': 'badge-success',
        'warning': 'badge-warning',
        'offline': 'badge-danger'
    }
    return badge_classes.get(status, 'badge-secondary')

def get_operation_status_class(status):
    """Get CSS class for operation status"""
    status_classes = {
        'success': 'bg-success',
        'warning': 'bg-warning',
        'error': 'bg-danger',
        'info': 'bg-primary'
    }
    return status_classes.get(status, 'bg-primary')

def format_time_ago(timestamp):
    """Format timestamp as 'time ago' string"""
    now = datetime.utcnow()
    diff = now - timestamp
    
    if diff.seconds < 60:
        return f"{diff.seconds} seconds ago"
    elif diff.seconds < 3600:
        minutes = diff.seconds // 60
        return f"{minutes} minutes ago"
    elif diff.total_seconds() < 86400:
        hours = diff.seconds // 3600
        return f"{hours} hours ago"
    else:
        days = diff.days
        return f"{days} days ago"

# API endpoints for dynamic updates (equivalent to React state updates)
@dashboard_bp.route('/api/refresh-data')
@login_required
def refresh_dashboard_data():
    """Refresh dashboard data via AJAX"""
    device_stats = get_device_statistics()
    return jsonify({
        'status': 'success',
        'data': device_stats,
        'timestamp': datetime.utcnow().isoformat()
    })

@dashboard_bp.route('/api/quick-deploy')
@login_required
def quick_deploy():
    """Quick deploy action (equivalent to React button handler)"""
    # This would trigger deployment process
    return jsonify({
        'status': 'success',
        'message': 'Quick deployment initiated',
        'redirect_url': '/automation'
    })
```

### Jinja2 Template (templates/dashboard/index.html)
```html
{% extends "base.html" %}

{% block title %}{{ page_title }} - Network Automation{% endblock %}

{% block content %}
<div class="container-fluid py-4">
    <!-- Page Header (equivalent to React header section) -->
    <div class="row mb-4">
        <div class="col-md-8">
            <h1 class="display-6 fw-bold">{{ page_title }}</h1>
            <p class="text-muted">{{ page_description }}</p>
        </div>
        <div class="col-md-4 text-end">
            <button class="btn btn-outline-primary me-2" onclick="refreshDashboardData()">
                <i class="fas fa-sync-alt"></i> Refresh Data
            </button>
            <button class="btn btn-primary" onclick="quickDeploy()">
                <i class="fas fa-bolt"></i> Quick Deploy
            </button>
        </div>
    </div>

    <!-- Status Cards (equivalent to React status overview cards) -->
    <div class="row mb-4">
        <div class="col-md-3 mb-3">
            <div class="card border-start border-success border-4">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h6 class="card-title text-muted mb-2">Online Devices</h6>
                            <h2 class="text-success mb-0">{{ device_stats.online_devices }}</h2>
                            <small class="text-muted">of {{ device_stats.total_devices }} total devices</small>
                        </div>
                        <i class="fas fa-check-circle fa-2x text-success"></i>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-md-3 mb-3">
            <div class="card border-start border-warning border-4">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h6 class="card-title text-muted mb-2">Warnings</h6>
                            <h2 class="text-warning mb-0">{{ device_stats.warning_devices }}</h2>
                            <small class="text-muted">require attention</small>
                        </div>
                        <i class="fas fa-exclamation-triangle fa-2x text-warning"></i>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-md-3 mb-3">
            <div class="card border-start border-danger border-4">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h6 class="card-title text-muted mb-2">Offline</h6>
                            <h2 class="text-danger mb-0">{{ device_stats.offline_devices }}</h2>
                            <small class="text-muted">devices down</small>
                        </div>
                        <i class="fas fa-server fa-2x text-danger"></i>
                    </div>
                </div>
            </div>
        </div>

        <div class="col-md-3 mb-3">
            <div class="card border-start border-primary border-4">
                <div class="card-body">
                    <div class="d-flex justify-content-between align-items-center">
                        <div>
                            <h6 class="card-title text-muted mb-2">Uptime</h6>
                            <h2 class="text-primary mb-0">{{ "%.1f"|format(device_stats.uptime_percentage) }}%</h2>
                            <small class="text-muted">last 30 days</small>
                        </div>
                        <i class="fas fa-clock fa-2x text-primary"></i>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Main Content Grid (equivalent to React main content) -->
    <div class="row">
        <!-- Device Status List (equivalent to React device status section) -->
        <div class="col-lg-8 mb-4">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title mb-0">
                        <i class="fas fa-router me-2"></i>
                        Device Status (R15-R25)
                    </h5>
                    <small class="text-muted">Current status of your Cisco router infrastructure</small>
                </div>
                <div class="card-body">
                    {% for device in device_list %}
                    <div class="d-flex justify-content-between align-items-center p-3 border rounded mb-3">
                        <div class="d-flex align-items-center">
                            <div class="rounded-circle {{ device.status_class }} me-3" style="width: 12px; height: 12px;"></div>
                            <div>
                                <h6 class="mb-1 fw-bold">{{ device.name }}</h6>
                                <small class="text-muted">{{ device.ip }}</small>
                            </div>
                        </div>
                        <div class="text-end">
                            <span class="badge {{ device.status_badge }} mb-1">{{ device.status }}</span>
                            <br>
                            <small class="text-muted">CPU: {{ device.cpu }}%</small>
                        </div>
                    </div>
                    {% endfor %}
                </div>
            </div>
        </div>

        <!-- Quick Actions & Network Health (equivalent to React right sidebar) -->
        <div class="col-lg-4">
            <!-- Quick Actions Card -->
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="card-title mb-0">
                        <i class="fas fa-bolt me-2"></i>
                        Quick Actions
                    </h5>
                </div>
                <div class="card-body">
                    <div class="d-grid gap-2">
                        <button class="btn btn-outline-primary" onclick="generateConfig()">
                            <i class="fas fa-network-wired me-2"></i>
                            Generate Config
                        </button>
                        <button class="btn btn-outline-primary" onclick="runAudit()">
                            <i class="fas fa-search me-2"></i>
                            Run Audit
                        </button>
                        <button class="btn btn-outline-primary" onclick="securityCheck()">
                            <i class="fas fa-shield-alt me-2"></i>
                            Security Check
                        </button>
                    </div>
                </div>
            </div>

            <!-- Network Health Card -->
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title mb-0">
                        <i class="fas fa-chart-line me-2"></i>
                        Network Health
                    </h5>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <div class="d-flex justify-content-between mb-2">
                            <span>Overall Health</span>
                            <span>{{ network_health.overall_health }}%</span>
                        </div>
                        <div class="progress">
                            <div class="progress-bar" style="width: {{ network_health.overall_health }}%"></div>
                        </div>
                    </div>

                    <div class="mb-3">
                        <div class="d-flex justify-content-between mb-2">
                            <span>Configuration Compliance</span>
                            <span>{{ network_health.configuration_compliance }}%</span>
                        </div>
                        <div class="progress">
                            <div class="progress-bar bg-success" style="width: {{ network_health.configuration_compliance }}%"></div>
                        </div>
                    </div>

                    <div class="mb-0">
                        <div class="d-flex justify-content-between mb-2">
                            <span>Security Score</span>
                            <span>{{ network_health.security_score }}%</span>
                        </div>
                        <div class="progress">
                            <div class="progress-bar bg-warning" style="width: {{ network_health.security_score }}%"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Recent Activity (equivalent to React recent activity feed) -->
    <div class="row mt-4">
        <div class="col-12">
            <div class="card">
                <div class="card-header">
                    <h5 class="card-title mb-0">Recent Activity</h5>
                    <small class="text-muted">Latest network operations and AI recommendations</small>
                </div>
                <div class="card-body">
                    {% for activity in recent_operations %}
                    <div class="d-flex align-items-center p-3 border rounded mb-3">
                        <div class="rounded-circle {{ activity.status_class }} me-3" style="width: 8px; height: 8px;"></div>
                        <div class="flex-grow-1">
                            <p class="mb-1">{{ activity.action }}</p>
                            <small class="text-muted">{{ activity.time }}</small>
                        </div>
                    </div>
                    {% endfor %}
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block scripts %}
<script>
// JavaScript functionality (equivalent to React event handlers)

function refreshDashboardData() {
    // Show loading state (equivalent to React loading state)
    const refreshBtn = document.querySelector('.btn[onclick="refreshDashboardData()"]');
    const originalText = refreshBtn.innerHTML;
    refreshBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Refreshing...';
    refreshBtn.disabled = true;
    
    // Fetch updated data (equivalent to React API call)
    fetch('/dashboard/api/refresh-data')
        .then(response => response.json())
        .then(data => {
            if (data.status === 'success') {
                // Update UI with new data (equivalent to React state update)
                updateDashboardStats(data.data);
                showToast('Dashboard data refreshed successfully', 'success');
            } else {
                showToast('Failed to refresh data', 'error');
            }
        })
        .catch(error => {
            showToast('Error refreshing data: ' + error.message, 'error');
        })
        .finally(() => {
            // Reset button state
            refreshBtn.innerHTML = originalText;
            refreshBtn.disabled = false;
        });
}

function quickDeploy() {
    // Quick deploy action (equivalent to React navigation)
    fetch('/dashboard/api/quick-deploy', { method: 'POST' })
        .then(response => response.json())
        .then(data => {
            if (data.status === 'success') {
                showToast(data.message, 'success');
                if (data.redirect_url) {
                    window.location.href = data.redirect_url;
                }
            }
        })
        .catch(error => {
            showToast('Error: ' + error.message, 'error');
        });
}

function generateConfig() {
    // Navigate to automation page (equivalent to React Router navigation)
    window.location.href = '/automation';
}

function runAudit() {
    // Navigate to operations page (equivalent to React Router navigation)
    window.location.href = '/operations';
}

function securityCheck() {
    // Trigger security check (equivalent to React function call)
    showToast('Security check initiated', 'info');
    window.location.href = '/operations?tab=audit';
}

function updateDashboardStats(stats) {
    // Update dashboard statistics (equivalent to React state update)
    document.querySelector('.text-success').textContent = stats.online_devices;
    document.querySelector('.text-warning').textContent = stats.warning_devices;
    document.querySelector('.text-danger').textContent = stats.offline_devices;
    // Add more updates as needed
}

// Initialize dashboard functionality when page loads
document.addEventListener('DOMContentLoaded', function() {
    // Set up auto-refresh (equivalent to React useEffect polling)
    setInterval(refreshDashboardData, 300000); // Refresh every 5 minutes
});
</script>
{% endblock %}
```

### Database Models (models/network_device.py)
```python
from flask_sqlalchemy import SQLAlchemy
from datetime import datetime

db = SQLAlchemy()

class NetworkDevice(db.Model):
    """Network device model (equivalent to React device data)"""
    __tablename__ = 'network_devices'
    
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False, unique=True)
    ip_address = db.Column(db.String(45), nullable=False)
    device_type = db.Column(db.String(50), nullable=False)
    vendor = db.Column(db.String(50), default='cisco')
    model = db.Column(db.String(100))
    status = db.Column(db.String(20), default='offline')  # online, warning, offline
    location = db.Column(db.String(200))
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    
    # Relationships
    metrics = db.relationship('NetworkMetric', backref='device', lazy=True)
    operations = db.relationship('NetworkOperation', backref='device', lazy=True)
    
    def to_dict(self):
        """Convert to dictionary (equivalent to React object)"""
        return {
            'id': self.id,
            'name': self.name,
            'ip_address': self.ip_address,
            'device_type': self.device_type,
            'vendor': self.vendor,
            'model': self.model,
            'status': self.status,
            'location': self.location,
            'created_at': self.created_at.isoformat(),
            'updated_at': self.updated_at.isoformat()
        }

class NetworkMetric(db.Model):
    """Network metrics model (equivalent to React performance data)"""
    __tablename__ = 'network_metrics'
    
    id = db.Column(db.Integer, primary_key=True)
    device_id = db.Column(db.Integer, db.ForeignKey('network_devices.id'), nullable=False)
    metric_type = db.Column(db.String(50), nullable=False)  # cpu_usage, memory_usage, uptime, etc.
    value = db.Column(db.Float, nullable=False)
    unit = db.Column(db.String(20))  # percentage, bytes, seconds, etc.
    timestamp = db.Column(db.DateTime, default=datetime.utcnow)

class NetworkOperation(db.Model):
    """Network operations model (equivalent to React activity data)"""
    __tablename__ = 'network_operations'
    
    id = db.Column(db.Integer, primary_key=True)
    device_id = db.Column(db.Integer, db.ForeignKey('network_devices.id'), nullable=True)
    operation_type = db.Column(db.String(50), nullable=False)  # config, backup, audit, etc.
    description = db.Column(db.Text, nullable=False)
    status = db.Column(db.String(20), default='pending')  # pending, success, error, warning
    result = db.Column(db.Text)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    completed_at = db.Column(db.DateTime)
    user_id = db.Column(db.Integer, db.ForeignKey('users.id'))
```

## Key Differences from React Implementation

### State Management
- **React**: Client-side state with hooks and real-time updates
- **Python/Flask**: Server-side data fetching with database queries

### Real-time Updates
- **React**: Live state updates and re-rendering
- **Python/Flask**: AJAX polling or WebSocket integration for real-time features

### Component Rendering
- **React**: Dynamic component rendering with JSX
- **Python/Flask**: Server-side template rendering with Jinja2

### Data Flow
- **React**: Props and state management for data flow
- **Python/Flask**: Template context variables and form submissions

This Python/Flask implementation provides equivalent functionality to the React Dashboard component while leveraging server-side rendering and traditional web application patterns.