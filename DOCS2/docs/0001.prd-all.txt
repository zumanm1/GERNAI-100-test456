# Product Requirements Document (PRD)
# Network Automation Platform - Complete Python Implementation

## 1. PROJECT OVERVIEW

### 1.1 Application Purpose
A comprehensive network automation platform designed for managing Cisco router fleets (R15-R25) with AI-powered configuration generation, device management, operations monitoring, and conversational AI assistance.

### 1.2 Technology Stack - Python Implementation
**Backend:**
- Framework: Flask 3.0+ with Blueprint architecture
- Database: PostgreSQL 15+ with SQLAlchemy 2.0+
- Authentication: Flask-Login + Flask-JWT-Extended
- API: Flask-RESTful for API endpoints
- AI Integration: OpenAI SDK, Anthropic SDK
- Task Queue: Celery with Redis
- WebSocket: Flask-SocketIO for real-time updates
- Configuration: Flask-Config with environment variables
- Validation: Marshmallow for data serialization
- Testing: Pytest with Flask-Testing

**Frontend:**
- Framework: Flask with Jinja2 templates
- Styling: Bootstrap 5.3+ with custom CSS
- JavaScript: Vanilla JS with modern ES6+ features
- Icons: Lucide (via CDN)
- Charts: Chart.js for data visualization
- Real-time: Socket.IO client for WebSocket connections
- HTTP Client: Fetch API for AJAX requests

### 1.3 Architecture Pattern
- **Backend**: MVC pattern with service layer
- **Frontend**: Server-side rendering with progressive enhancement
- **Database**: Normalized PostgreSQL schema with proper indexing
- **API**: RESTful endpoints with JSON responses
- **Authentication**: Session-based with JWT for API access

## 2. DATABASE SCHEMA

### 2.1 Core Tables

```sql
-- Users table
CREATE TABLE users (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    email VARCHAR(255) UNIQUE NOT NULL,
    password_hash VARCHAR(255) NOT NULL,
    display_name VARCHAR(100),
    avatar_url TEXT,
    role VARCHAR(50) DEFAULT 'user',
    is_active BOOLEAN DEFAULT true,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- Network devices table
CREATE TABLE network_devices (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    name VARCHAR(100) NOT NULL,
    ip_address INET NOT NULL,
    model VARCHAR(100) NOT NULL,
    status VARCHAR(20) DEFAULT 'unknown',
    uptime_seconds BIGINT DEFAULT 0,
    last_seen TIMESTAMP WITH TIME ZONE,
    config_backup TEXT,
    metadata JSONB,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- Operations log table
CREATE TABLE operations_log (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID REFERENCES users(id),
    device_id UUID REFERENCES network_devices(id),
    operation_type VARCHAR(50) NOT NULL,
    status VARCHAR(20) NOT NULL,
    command TEXT,
    result TEXT,
    error_message TEXT,
    execution_time_ms INTEGER,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- AI conversations table
CREATE TABLE ai_conversations (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID REFERENCES users(id),
    session_id VARCHAR(100) NOT NULL,
    message_role VARCHAR(20) NOT NULL, -- 'user' or 'assistant'
    message_content TEXT NOT NULL,
    metadata JSONB,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- Automation tasks table
CREATE TABLE automation_tasks (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID REFERENCES users(id),
    name VARCHAR(200) NOT NULL,
    description TEXT,
    task_type VARCHAR(50) NOT NULL,
    schedule_cron VARCHAR(100),
    is_active BOOLEAN DEFAULT true,
    config JSONB NOT NULL,
    last_run TIMESTAMP WITH TIME ZONE,
    next_run TIMESTAMP WITH TIME ZONE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- System configurations table
CREATE TABLE system_configs (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    config_key VARCHAR(100) UNIQUE NOT NULL,
    config_value JSONB NOT NULL,
    description TEXT,
    is_encrypted BOOLEAN DEFAULT false,
    updated_by UUID REFERENCES users(id),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);
```

### 2.2 Indexes and Constraints

```sql
-- Indexes for performance
CREATE INDEX idx_devices_status ON network_devices(status);
CREATE INDEX idx_devices_ip ON network_devices(ip_address);
CREATE INDEX idx_operations_user_device ON operations_log(user_id, device_id);
CREATE INDEX idx_operations_created_at ON operations_log(created_at DESC);
CREATE INDEX idx_conversations_user_session ON ai_conversations(user_id, session_id);
CREATE INDEX idx_automation_user ON automation_tasks(user_id);
CREATE INDEX idx_automation_next_run ON automation_tasks(next_run) WHERE is_active = true;

-- Constraints
ALTER TABLE network_devices ADD CONSTRAINT chk_status 
    CHECK (status IN ('online', 'offline', 'warning', 'unknown'));
ALTER TABLE operations_log ADD CONSTRAINT chk_operation_status 
    CHECK (status IN ('success', 'failed', 'pending', 'running'));
ALTER TABLE ai_conversations ADD CONSTRAINT chk_message_role 
    CHECK (message_role IN ('user', 'assistant', 'system'));
```

## 3. BACKEND IMPLEMENTATION

### 3.1 Flask Application Structure

```
app/
├── __init__.py              # Flask app factory
├── config.py               # Configuration settings
├── models/                 # SQLAlchemy models
│   ├── __init__.py
│   ├── user.py
│   ├── device.py
│   ├── operation.py
│   ├── conversation.py
│   └── automation.py
├── blueprints/            # Flask blueprints
│   ├── __init__.py
│   ├── auth.py           # Authentication routes
│   ├── dashboard.py      # Dashboard routes
│   ├── automation.py     # Automation routes
│   ├── operations.py     # Operations routes
│   ├── devices.py        # Device management routes
│   ├── settings.py       # Settings routes
│   ├── chat.py          # Chat interface routes
│   └── api/             # API endpoints
│       ├── __init__.py
│       ├── devices.py
│       ├── operations.py
│       └── chat.py
├── services/              # Business logic layer
│   ├── __init__.py
│   ├── auth_service.py
│   ├── device_service.py
│   ├── operation_service.py
│   ├── ai_service.py
│   └── automation_service.py
├── utils/                # Utility functions
│   ├── __init__.py
│   ├── validators.py
│   ├── decorators.py
│   └── helpers.py
└── static/               # Static assets
    ├── css/
    ├── js/
    └── images/
```

### 3.2 Flask App Factory (app/__init__.py)

```python
from flask import Flask
from flask_sqlalchemy import SQLAlchemy
from flask_login import LoginManager
from flask_migrate import Migrate
from flask_cors import CORS
from flask_jwt_extended import JWTManager
from flask_socketio import SocketIO
import os

# Initialize extensions
db = SQLAlchemy()
login_manager = LoginManager()
migrate = Migrate()
jwt = JWTManager()
socketio = SocketIO()

def create_app(config_name=None):
    app = Flask(__name__)
    
    # Load configuration
    if config_name is None:
        config_name = os.environ.get('FLASK_ENV', 'development')
    app.config.from_object(f'app.config.{config_name.capitalize()}Config')
    
    # Initialize extensions
    db.init_app(app)
    login_manager.init_app(app)
    migrate.init_app(app, db)
    jwt.init_app(app)
    socketio.init_app(app, cors_allowed_origins="*")
    CORS(app)
    
    # Configure login manager
    login_manager.login_view = 'auth.login'
    login_manager.login_message = 'Please log in to access this page.'
    
    @login_manager.user_loader
    def load_user(user_id):
        from app.models.user import User
        return User.query.get(user_id)
    
    # Register blueprints
    from app.blueprints.auth import auth_bp
    from app.blueprints.dashboard import dashboard_bp
    from app.blueprints.automation import automation_bp
    from app.blueprints.operations import operations_bp
    from app.blueprints.devices import devices_bp
    from app.blueprints.settings import settings_bp
    from app.blueprints.chat import chat_bp
    
    app.register_blueprint(auth_bp, url_prefix='/auth')
    app.register_blueprint(dashboard_bp, url_prefix='/')
    app.register_blueprint(automation_bp, url_prefix='/automation')
    app.register_blueprint(operations_bp, url_prefix='/operations')
    app.register_blueprint(devices_bp, url_prefix='/devices')
    app.register_blueprint(settings_bp, url_prefix='/settings')
    app.register_blueprint(chat_bp, url_prefix='/chat')
    
    # Register API blueprints
    from app.blueprints.api.devices import api_devices_bp
    from app.blueprints.api.operations import api_operations_bp
    from app.blueprints.api.chat import api_chat_bp
    
    app.register_blueprint(api_devices_bp, url_prefix='/api/devices')
    app.register_blueprint(api_operations_bp, url_prefix='/api/operations')
    app.register_blueprint(api_chat_bp, url_prefix='/api/chat')
    
    # Error handlers
    @app.errorhandler(404)
    def not_found(error):
        return render_template('errors/404.html'), 404
    
    @app.errorhandler(500)
    def internal_error(error):
        db.session.rollback()
        return render_template('errors/500.html'), 500
    
    return app
```

### 3.3 Configuration (app/config.py)

```python
import os
from datetime import timedelta

class Config:
    SECRET_KEY = os.environ.get('SECRET_KEY') or 'dev-secret-key-change-in-production'
    SQLALCHEMY_TRACK_MODIFICATIONS = False
    JWT_SECRET_KEY = os.environ.get('JWT_SECRET_KEY') or 'jwt-secret-key'
    JWT_ACCESS_TOKEN_EXPIRES = timedelta(hours=1)
    JWT_REFRESH_TOKEN_EXPIRES = timedelta(days=30)
    
    # AI Service configurations
    OPENAI_API_KEY = os.environ.get('OPENAI_API_KEY')
    ANTHROPIC_API_KEY = os.environ.get('ANTHROPIC_API_KEY')
    
    # Redis for Celery
    REDIS_URL = os.environ.get('REDIS_URL') or 'redis://localhost:6379/0'
    
    # Email configuration
    MAIL_SERVER = os.environ.get('MAIL_SERVER')
    MAIL_PORT = int(os.environ.get('MAIL_PORT') or 587)
    MAIL_USE_TLS = os.environ.get('MAIL_USE_TLS', 'true').lower() in ['true', 'on', '1']
    MAIL_USERNAME = os.environ.get('MAIL_USERNAME')
    MAIL_PASSWORD = os.environ.get('MAIL_PASSWORD')

class DevelopmentConfig(Config):
    DEBUG = True
    SQLALCHEMY_DATABASE_URI = os.environ.get('DEV_DATABASE_URL') or \
        'postgresql://user:password@localhost/network_automation_dev'

class ProductionConfig(Config):
    DEBUG = False
    SQLALCHEMY_DATABASE_URI = os.environ.get('DATABASE_URL') or \
        'postgresql://user:password@localhost/network_automation_prod'

class TestingConfig(Config):
    TESTING = True
    SQLALCHEMY_DATABASE_URI = 'sqlite:///:memory:'
    WTF_CSRF_ENABLED = False
```

## 4. MODELS IMPLEMENTATION

### 4.1 User Model (app/models/user.py)

```python
from app import db
from flask_login import UserMixin
from werkzeug.security import generate_password_hash, check_password_hash
from datetime import datetime
import uuid

class User(UserMixin, db.Model):
    __tablename__ = 'users'
    
    id = db.Column(db.String(36), primary_key=True, default=lambda: str(uuid.uuid4()))
    email = db.Column(db.String(255), unique=True, nullable=False, index=True)
    password_hash = db.Column(db.String(255), nullable=False)
    display_name = db.Column(db.String(100))
    avatar_url = db.Column(db.Text)
    role = db.Column(db.String(50), default='user')
    is_active = db.Column(db.Boolean, default=True)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    
    # Relationships
    operations = db.relationship('OperationLog', backref='user', lazy='dynamic')
    conversations = db.relationship('AIConversation', backref='user', lazy='dynamic')
    automation_tasks = db.relationship('AutomationTask', backref='user', lazy='dynamic')
    
    def set_password(self, password):
        """Hash and set password"""
        self.password_hash = generate_password_hash(password)
    
    def check_password(self, password):
        """Check password against hash"""
        return check_password_hash(self.password_hash, password)
    
    def to_dict(self):
        """Convert user to dictionary"""
        return {
            'id': self.id,
            'email': self.email,
            'display_name': self.display_name,
            'avatar_url': self.avatar_url,
            'role': self.role,
            'is_active': self.is_active,
            'created_at': self.created_at.isoformat() if self.created_at else None,
            'updated_at': self.updated_at.isoformat() if self.updated_at else None
        }
    
    def __repr__(self):
        return f'<User {self.email}>'
```

### 4.2 Device Model (app/models/device.py)

```python
from app import db
from datetime import datetime
import uuid
import ipaddress

class NetworkDevice(db.Model):
    __tablename__ = 'network_devices'
    
    id = db.Column(db.String(36), primary_key=True, default=lambda: str(uuid.uuid4()))
    name = db.Column(db.String(100), nullable=False, index=True)
    ip_address = db.Column(db.String(39), nullable=False, index=True)  # Support IPv6
    model = db.Column(db.String(100), nullable=False)
    status = db.Column(db.String(20), default='unknown')
    uptime_seconds = db.Column(db.BigInteger, default=0)
    last_seen = db.Column(db.DateTime)
    config_backup = db.Column(db.Text)
    metadata = db.Column(db.JSON)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    
    # Relationships
    operations = db.relationship('OperationLog', backref='device', lazy='dynamic')
    
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        # Validate IP address on creation
        if self.ip_address:
            self.validate_ip_address()
    
    def validate_ip_address(self):
        """Validate IP address format"""
        try:
            ipaddress.ip_address(self.ip_address)
        except ValueError:
            raise ValueError(f"Invalid IP address: {self.ip_address}")
    
    @property
    def uptime_formatted(self):
        """Return formatted uptime string"""
        if not self.uptime_seconds:
            return "0d 0h"
        
        days = self.uptime_seconds // 86400
        hours = (self.uptime_seconds % 86400) // 3600
        return f"{days}d {hours}h"
    
    @property
    def is_online(self):
        """Check if device is online"""
        return self.status == 'online'
    
    def update_status(self, status, uptime_seconds=None):
        """Update device status and uptime"""
        self.status = status
        self.last_seen = datetime.utcnow()
        if uptime_seconds is not None:
            self.uptime_seconds = uptime_seconds
    
    def to_dict(self):
        """Convert device to dictionary"""
        return {
            'id': self.id,
            'name': self.name,
            'ip_address': self.ip_address,
            'model': self.model,
            'status': self.status,
            'uptime': self.uptime_formatted,
            'uptime_seconds': self.uptime_seconds,
            'last_seen': self.last_seen.isoformat() if self.last_seen else None,
            'has_config_backup': bool(self.config_backup),
            'metadata': self.metadata or {},
            'created_at': self.created_at.isoformat() if self.created_at else None,
            'updated_at': self.updated_at.isoformat() if self.updated_at else None
        }
    
    def __repr__(self):
        return f'<NetworkDevice {self.name} ({self.ip_address})>'
```

## 5. ROUTES AND BLUEPRINTS

### 5.1 Dashboard Blueprint (app/blueprints/dashboard.py)

```python
from flask import Blueprint, render_template, jsonify, request
from flask_login import login_required, current_user
from app.models.device import NetworkDevice
from app.models.operation import OperationLog
from app.services.device_service import DeviceService
from app.services.operation_service import OperationService
from datetime import datetime, timedelta

dashboard_bp = Blueprint('dashboard', __name__)

@dashboard_bp.route('/')
@login_required
def index():
    """Dashboard main page"""
    # Get device statistics
    device_service = DeviceService()
    device_stats = device_service.get_device_statistics()
    
    # Get recent operations
    operation_service = OperationService()
    recent_operations = operation_service.get_recent_operations(limit=10)
    
    # Get system health metrics
    health_metrics = {
        'cpu_usage': 45,  # Mock data - implement actual monitoring
        'memory_usage': 62,
        'network_latency': 12,
        'active_connections': 234
    }
    
    return render_template('dashboard/index.html',
                         device_stats=device_stats,
                         recent_operations=recent_operations,
                         health_metrics=health_metrics)

@dashboard_bp.route('/api/stats')
@login_required
def api_stats():
    """API endpoint for dashboard statistics"""
    try:
        device_service = DeviceService()
        operation_service = OperationService()
        
        stats = {
            'devices': device_service.get_device_statistics(),
            'operations': operation_service.get_operation_statistics(),
            'uptime': operation_service.get_system_uptime(),
            'last_updated': datetime.utcnow().isoformat()
        }
        
        return jsonify(stats)
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@dashboard_bp.route('/api/device-status-chart')
@login_required
def api_device_status_chart():
    """API endpoint for device status chart data"""
    try:
        device_service = DeviceService()
        chart_data = device_service.get_status_chart_data()
        return jsonify(chart_data)
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@dashboard_bp.route('/api/operations-timeline')
@login_required
def api_operations_timeline():
    """API endpoint for operations timeline data"""
    try:
        operation_service = OperationService()
        days = request.args.get('days', 7, type=int)
        timeline_data = operation_service.get_operations_timeline(days)
        return jsonify(timeline_data)
    except Exception as e:
        return jsonify({'error': str(e)}), 500
```

### 5.2 Devices Blueprint (app/blueprints/devices.py)

```python
from flask import Blueprint, render_template, request, jsonify, redirect, url_for, flash
from flask_login import login_required, current_user
from app.models.device import NetworkDevice
from app.services.device_service import DeviceService
from app.utils.validators import validate_device_data
from marshmallow import ValidationError

devices_bp = Blueprint('devices', __name__)

@devices_bp.route('/')
@login_required
def index():
    """Device management main page"""
    device_service = DeviceService()
    devices = device_service.get_all_devices()
    
    return render_template('devices/index.html', devices=devices)

@devices_bp.route('/add', methods=['GET', 'POST'])
@login_required
def add_device():
    """Add new device"""
    if request.method == 'POST':
        try:
            device_data = request.get_json() if request.is_json else request.form.to_dict()
            
            # Validate device data
            validate_device_data(device_data)
            
            device_service = DeviceService()
            device = device_service.create_device(device_data)
            
            if request.is_json:
                return jsonify(device.to_dict()), 201
            else:
                flash(f'Device {device.name} added successfully!', 'success')
                return redirect(url_for('devices.index'))
                
        except ValidationError as e:
            if request.is_json:
                return jsonify({'errors': e.messages}), 400
            else:
                flash(f'Validation error: {e.messages}', 'error')
                
        except Exception as e:
            if request.is_json:
                return jsonify({'error': str(e)}), 500
            else:
                flash(f'Error adding device: {str(e)}', 'error')
    
    return render_template('devices/add.html')

@devices_bp.route('/<device_id>')
@login_required
def view_device(device_id):
    """View device details"""
    device_service = DeviceService()
    device = device_service.get_device_by_id(device_id)
    
    if not device:
        flash('Device not found', 'error')
        return redirect(url_for('devices.index'))
    
    # Get device operations history
    operation_service = OperationService()
    operations = operation_service.get_device_operations(device_id, limit=50)
    
    return render_template('devices/detail.html', device=device, operations=operations)

@devices_bp.route('/<device_id>/connect', methods=['POST'])
@login_required
def connect_device(device_id):
    """Test device connectivity"""
    try:
        device_service = DeviceService()
        result = device_service.test_connectivity(device_id)
        
        return jsonify(result)
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@devices_bp.route('/<device_id>/backup-config', methods=['POST'])
@login_required
def backup_config(device_id):
    """Backup device configuration"""
    try:
        device_service = DeviceService()
        result = device_service.backup_configuration(device_id)
        
        return jsonify(result)
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@devices_bp.route('/<device_id>/delete', methods=['DELETE'])
@login_required
def delete_device(device_id):
    """Delete device"""
    try:
        device_service = DeviceService()
        device_service.delete_device(device_id)
        
        return jsonify({'message': 'Device deleted successfully'})
    except Exception as e:
        return jsonify({'error': str(e)}), 500
```

### 5.3 Chat Blueprint (app/blueprints/chat.py)

```python
from flask import Blueprint, render_template, request, jsonify, session
from flask_login import login_required, current_user
from flask_socketio import emit, join_room, leave_room
from app import socketio
from app.models.conversation import AIConversation
from app.services.ai_service import AIService
import uuid

chat_bp = Blueprint('chat', __name__)

@chat_bp.route('/')
@login_required
def index():
    """Chat interface main page"""
    # Create new session ID for this chat session
    session_id = str(uuid.uuid4())
    session['chat_session_id'] = session_id
    
    # Get recent conversations for this user
    recent_conversations = AIConversation.query.filter_by(
        user_id=current_user.id
    ).order_by(AIConversation.created_at.desc()).limit(50).all()
    
    return render_template('chat/index.html', 
                         session_id=session_id,
                         recent_conversations=recent_conversations)

@chat_bp.route('/api/send', methods=['POST'])
@login_required
def send_message():
    """Send message to AI"""
    try:
        data = request.get_json()
        message = data.get('message', '').strip()
        session_id = data.get('session_id') or session.get('chat_session_id')
        
        if not message:
            return jsonify({'error': 'Message cannot be empty'}), 400
        
        # Save user message
        user_message = AIConversation(
            user_id=current_user.id,
            session_id=session_id,
            message_role='user',
            message_content=message
        )
        db.session.add(user_message)
        db.session.commit()
        
        # Get AI response
        ai_service = AIService()
        ai_response = ai_service.get_response(message, session_id, current_user.id)
        
        # Save AI response
        ai_message = AIConversation(
            user_id=current_user.id,
            session_id=session_id,
            message_role='assistant',
            message_content=ai_response
        )
        db.session.add(ai_message)
        db.session.commit()
        
        # Emit real-time update via WebSocket
        socketio.emit('new_message', {
            'role': 'assistant',
            'content': ai_response,
            'timestamp': ai_message.created_at.isoformat()
        }, room=session_id)
        
        return jsonify({
            'response': ai_response,
            'session_id': session_id
        })
        
    except Exception as e:
        return jsonify({'error': str(e)}), 500

@socketio.on('join_chat')
def on_join_chat(data):
    """Handle user joining chat room"""
    session_id = data.get('session_id')
    if session_id:
        join_room(session_id)
        emit('status', {'message': 'Connected to chat'})

@socketio.on('leave_chat')
def on_leave_chat(data):
    """Handle user leaving chat room"""
    session_id = data.get('session_id')
    if session_id:
        leave_room(session_id)
```

## 6. SERVICES LAYER

### 6.1 Device Service (app/services/device_service.py)

```python
from app import db
from app.models.device import NetworkDevice
from app.models.operation import OperationLog
from datetime import datetime, timedelta
import paramiko
import socket
import json

class DeviceService:
    """Service class for device operations"""
    
    def get_all_devices(self):
        """Get all devices"""
        return NetworkDevice.query.order_by(NetworkDevice.name).all()
    
    def get_device_by_id(self, device_id):
        """Get device by ID"""
        return NetworkDevice.query.get(device_id)
    
    def create_device(self, device_data):
        """Create new device"""
        device = NetworkDevice(
            name=device_data['name'],
            ip_address=device_data['ip_address'],
            model=device_data['model'],
            status='unknown',
            metadata=device_data.get('metadata', {})
        )
        
        db.session.add(device)
        db.session.commit()
        
        # Test initial connectivity
        self.test_connectivity(device.id, save_result=True)
        
        return device
    
    def update_device(self, device_id, device_data):
        """Update device information"""
        device = self.get_device_by_id(device_id)
        if not device:
            raise ValueError("Device not found")
        
        device.name = device_data.get('name', device.name)
        device.ip_address = device_data.get('ip_address', device.ip_address)
        device.model = device_data.get('model', device.model)
        device.metadata = device_data.get('metadata', device.metadata)
        device.updated_at = datetime.utcnow()
        
        db.session.commit()
        return device
    
    def delete_device(self, device_id):
        """Delete device"""
        device = self.get_device_by_id(device_id)
        if not device:
            raise ValueError("Device not found")
        
        db.session.delete(device)
        db.session.commit()
    
    def test_connectivity(self, device_id, save_result=False):
        """Test device connectivity"""
        device = self.get_device_by_id(device_id)
        if not device:
            raise ValueError("Device not found")
        
        start_time = datetime.utcnow()
        result = {
            'device_id': device_id,
            'device_name': device.name,
            'ip_address': device.ip_address,
            'status': 'unknown',
            'response_time_ms': 0,
            'error': None
        }
        
        try:
            # Test basic connectivity with ping
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(5)
            
            start_ping = datetime.utcnow()
            connection_result = sock.connect_ex((device.ip_address, 22))  # SSH port
            end_ping = datetime.utcnow()
            
            response_time = (end_ping - start_ping).total_seconds() * 1000
            result['response_time_ms'] = round(response_time, 2)
            
            if connection_result == 0:
                result['status'] = 'online'
                device.update_status('online')
            else:
                result['status'] = 'offline'
                device.update_status('offline')
                result['error'] = 'Connection refused'
            
            sock.close()
            
        except socket.timeout:
            result['status'] = 'offline'
            result['error'] = 'Connection timeout'
            device.update_status('offline')
            
        except Exception as e:
            result['status'] = 'offline'
            result['error'] = str(e)
            device.update_status('offline')
        
        # Save operation log if requested
        if save_result:
            operation = OperationLog(
                device_id=device_id,
                operation_type='connectivity_test',
                status='success' if result['status'] == 'online' else 'failed',
                result=json.dumps(result),
                execution_time_ms=int(result['response_time_ms'])
            )
            db.session.add(operation)
        
        db.session.commit()
        return result
    
    def backup_configuration(self, device_id):
        """Backup device configuration via SSH"""
        device = self.get_device_by_id(device_id)
        if not device:
            raise ValueError("Device not found")
        
        start_time = datetime.utcnow()
        result = {
            'device_id': device_id,
            'device_name': device.name,
            'status': 'failed',
            'config_size': 0,
            'error': None
        }
        
        try:
            # SSH connection to device
            ssh = paramiko.SSHClient()
            ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
            
            # Note: In production, use proper credential management
            ssh.connect(
                device.ip_address,
                username='admin',  # Configure properly
                password='admin',  # Use secure credential storage
                timeout=30
            )
            
            # Execute show running-config command
            stdin, stdout, stderr = ssh.exec_command('show running-config')
            config_output = stdout.read().decode('utf-8')
            error_output = stderr.read().decode('utf-8')
            
            if error_output:
                raise Exception(f"Command error: {error_output}")
            
            # Save configuration backup
            device.config_backup = config_output
            device.updated_at = datetime.utcnow()
            
            result['status'] = 'success'
            result['config_size'] = len(config_output)
            
            ssh.close()
            
        except Exception as e:
            result['error'] = str(e)
        
        # Save operation log
        end_time = datetime.utcnow()
        execution_time = (end_time - start_time).total_seconds() * 1000
        
        operation = OperationLog(
            device_id=device_id,
            operation_type='config_backup',
            status=result['status'],
            command='show running-config',
            result=json.dumps(result),
            error_message=result.get('error'),
            execution_time_ms=int(execution_time)
        )
        db.session.add(operation)
        db.session.commit()
        
        return result
    
    def get_device_statistics(self):
        """Get device statistics for dashboard"""
        total_devices = NetworkDevice.query.count()
        online_devices = NetworkDevice.query.filter_by(status='online').count()
        offline_devices = NetworkDevice.query.filter_by(status='offline').count()
        warning_devices = NetworkDevice.query.filter_by(status='warning').count()
        
        return {
            'total': total_devices,
            'online': online_devices,
            'offline': offline_devices,
            'warning': warning_devices,
            'online_percentage': round((online_devices / total_devices * 100) if total_devices > 0 else 0, 1)
        }
    
    def get_status_chart_data(self):
        """Get data for device status chart"""
        stats = self.get_device_statistics()
        
        return {
            'labels': ['Online', 'Offline', 'Warning'],
            'data': [stats['online'], stats['offline'], stats['warning']],
            'backgroundColor': ['#22c55e', '#ef4444', '#f59e0b']
        }
```

### 6.2 AI Service (app/services/ai_service.py)

```python
import openai
import anthropic
from app.models.conversation import AIConversation
from app.models.device import NetworkDevice
from app.models.operation import OperationLog
from app import db
import json
import os

class AIService:
    """Service class for AI operations"""
    
    def __init__(self):
        self.openai_client = openai.OpenAI(api_key=os.environ.get('OPENAI_API_KEY'))
        self.anthropic_client = anthropic.Anthropic(api_key=os.environ.get('ANTHROPIC_API_KEY'))
    
    def get_response(self, user_message, session_id, user_id):
        """Get AI response to user message"""
        # Get conversation context
        context = self._get_conversation_context(session_id, user_id)
        
        # Get system context (device info, recent operations)
        system_context = self._get_system_context(user_id)
        
        # Prepare messages for AI
        messages = [
            {
                "role": "system",
                "content": f"""You are a GENAI network assistant specialized in Cisco network automation. 
                You help with network configuration, troubleshooting, and automation tasks.
                
                Current system context:
                {json.dumps(system_context, indent=2)}
                
                Provide helpful, accurate responses about network operations. If you need to perform 
                actions on devices, explain what you would do but note that actual device operations 
                require manual confirmation."""
            }
        ]
        
        # Add conversation history
        for msg in context:
            messages.append({
                "role": msg.message_role,
                "content": msg.message_content
            })
        
        # Add current user message
        messages.append({
            "role": "user",
            "content": user_message
        })
        
        try:
            # Use OpenAI GPT-4 for response
            response = self.openai_client.chat.completions.create(
                model="gpt-4",
                messages=messages,
                max_tokens=1000,
                temperature=0.7
            )
            
            return response.choices[0].message.content
            
        except Exception as e:
            # Fallback to Anthropic Claude if OpenAI fails
            try:
                response = self.anthropic_client.messages.create(
                    model="claude-3-sonnet-20240229",
                    max_tokens=1000,
                    messages=messages[1:],  # Claude doesn't need system message in messages array
                    system=messages[0]["content"]
                )
                
                return response.content[0].text
                
            except Exception as fallback_error:
                return f"I apologize, but I'm experiencing technical difficulties. Please try again later. Error: {str(fallback_error)}"
    
    def _get_conversation_context(self, session_id, user_id, limit=10):
        """Get recent conversation context"""
        return AIConversation.query.filter_by(
            session_id=session_id,
            user_id=user_id
        ).order_by(
            AIConversation.created_at.desc()
        ).limit(limit).all()[::-1]  # Reverse to get chronological order
    
    def _get_system_context(self, user_id):
        """Get current system context for AI"""
        # Get device information
        devices = NetworkDevice.query.all()
        device_summary = []
        
        for device in devices:
            device_summary.append({
                'name': device.name,
                'ip': device.ip_address,
                'model': device.model,
                'status': device.status,
                'uptime': device.uptime_formatted
            })
        
        # Get recent operations
        recent_operations = OperationLog.query.order_by(
            OperationLog.created_at.desc()
        ).limit(5).all()
        
        operation_summary = []
        for op in recent_operations:
            operation_summary.append({
                'type': op.operation_type,
                'status': op.status,
                'device': op.device.name if op.device else 'Unknown',
                'timestamp': op.created_at.isoformat(),
                'error': op.error_message
            })
        
        return {
            'devices': device_summary,
            'recent_operations': operation_summary,
            'total_devices': len(devices),
            'online_devices': len([d for d in devices if d.status == 'online'])
        }
    
    def generate_configuration(self, config_type, parameters):
        """Generate network configuration using AI"""
        prompt = f"""Generate a Cisco IOS configuration for {config_type} with the following parameters:
        {json.dumps(parameters, indent=2)}
        
        Provide a complete, production-ready configuration with:
        1. Proper syntax and commands
        2. Security best practices
        3. Comments explaining key sections
        4. Error handling where applicable
        
        Format the response as a code block with proper indentation."""
        
        try:
            response = self.openai_client.chat.completions.create(
                model="gpt-4",
                messages=[
                    {
                        "role": "system",
                        "content": "You are an expert Cisco network engineer. Generate accurate, secure, and production-ready configurations."
                    },
                    {
                        "role": "user",
                        "content": prompt
                    }
                ],
                max_tokens=2000,
                temperature=0.3  # Lower temperature for more consistent technical output
            )
            
            return response.choices[0].message.content
            
        except Exception as e:
            raise Exception(f"Failed to generate configuration: {str(e)}")
```

## 7. FRONTEND IMPLEMENTATION

### 7.1 Base Template (templates/base.html)

```html
<!DOCTYPE html>
<html lang="en" class="h-full">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% block title %}Network Automation Platform{% endblock %}</title>
    
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    
    <!-- Lucide Icons -->
    <script src="https://unpkg.com/lucide@latest/dist/umd/lucide.js"></script>
    
    <!-- Chart.js -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    
    <!-- Socket.IO -->
    <script src="https://cdn.socket.io/4.7.2/socket.io.min.js"></script>
    
    <!-- Custom CSS -->
    <link href="{{ url_for('static', filename='css/style.css') }}" rel="stylesheet">
    
    {% block head %}{% endblock %}
</head>
<body class="h-full bg-gray-50">
    <!-- Navigation -->
    <nav class="navbar navbar-expand-lg navbar-dark bg-primary sticky-top">
        <div class="container-fluid">
            <a class="navbar-brand fw-bold" href="{{ url_for('dashboard.index') }}">
                <i data-lucide="network" class="me-2"></i>
                Network Automation
            </a>
            
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
                <span class="navbar-toggler-icon"></span>
            </button>
            
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav me-auto">
                    <li class="nav-item">
                        <a class="nav-link {{ 'active' if request.endpoint == 'dashboard.index' }}" 
                           href="{{ url_for('dashboard.index') }}">
                            <i data-lucide="layout-dashboard" class="me-1"></i>
                            Dashboard
                        </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link {{ 'active' if request.blueprint == 'automation' }}" 
                           href="{{ url_for('automation.index') }}">
                            <i data-lucide="bot" class="me-1"></i>
                            Automation
                        </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link {{ 'active' if request.blueprint == 'operations' }}" 
                           href="{{ url_for('operations.index') }}">
                            <i data-lucide="activity" class="me-1"></i>
                            Operations
                        </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link {{ 'active' if request.blueprint == 'devices' }}" 
                           href="{{ url_for('devices.index') }}">
                            <i data-lucide="server" class="me-1"></i>
                            Devices
                        </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link {{ 'active' if request.blueprint == 'chat' }}" 
                           href="{{ url_for('chat.index') }}">
                            <i data-lucide="message-square" class="me-1"></i>
                            AI Chat
                        </a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link {{ 'active' if request.blueprint == 'settings' }}" 
                           href="{{ url_for('settings.index') }}">
                            <i data-lucide="settings" class="me-1"></i>
                            Settings
                        </a>
                    </li>
                </ul>
                
                <ul class="navbar-nav">
                    <li class="nav-item dropdown">
                        <a class="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown">
                            <i data-lucide="user" class="me-1"></i>
                            {{ current_user.display_name or current_user.email }}
                        </a>
                        <ul class="dropdown-menu">
                            <li><a class="dropdown-item" href="{{ url_for('settings.profile') }}">Profile</a></li>
                            <li><hr class="dropdown-divider"></li>
                            <li><a class="dropdown-item" href="{{ url_for('auth.logout') }}">Logout</a></li>
                        </ul>
                    </li>
                </ul>
            </div>
        </div>
    </nav>

    <!-- Flash Messages -->
    {% with messages = get_flashed_messages(with_categories=true) %}
        {% if messages %}
            <div class="container-fluid mt-3">
                {% for category, message in messages %}
                    <div class="alert alert-{{ 'danger' if category == 'error' else category }} alert-dismissible fade show" role="alert">
                        {{ message }}
                        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                    </div>
                {% endfor %}
            </div>
        {% endif %}
    {% endwith %}

    <!-- Main Content -->
    <main class="container-fluid py-4">
        {% block content %}{% endblock %}
    </main>

    <!-- Toast Container -->
    <div class="toast-container position-fixed bottom-0 end-0 p-3" id="toast-container"></div>

    <!-- Bootstrap JS -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    
    <!-- Custom JS -->
    <script src="{{ url_for('static', filename='js/app.js') }}"></script>
    
    <!-- Initialize Lucide Icons -->
    <script>lucide.createIcons();</script>
    
    {% block scripts %}{% endblock %}
</body>
</html>
```

### 7.2 Dashboard Template (templates/dashboard/index.html)

```html
{% extends "base.html" %}

{% block title %}Dashboard - Network Automation Platform{% endblock %}

{% block content %}
<div class="row">
    <div class="col-12">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <div>
                <h1 class="h2 mb-1">Network Dashboard</h1>
                <p class="text-muted">Real-time monitoring and control of your network infrastructure</p>
            </div>
            <div>
                <button class="btn btn-outline-primary me-2" id="refresh-dashboard">
                    <i data-lucide="refresh-cw" class="me-1"></i>
                    Refresh
                </button>
                <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#quick-action-modal">
                    <i data-lucide="zap" class="me-1"></i>
                    Quick Action
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Statistics Cards -->
<div class="row g-4 mb-4">
    <div class="col-xl-3 col-md-6">
        <div class="card border-0 shadow-sm">
            <div class="card-body">
                <div class="d-flex align-items-center">
                    <div class="flex-shrink-0">
                        <div class="bg-success bg-opacity-10 p-3 rounded">
                            <i data-lucide="server" class="text-success"></i>
                        </div>
                    </div>
                    <div class="flex-grow-1 ms-3">
                        <h6 class="card-subtitle text-muted mb-1">Total Devices</h6>
                        <h3 class="card-title mb-0">{{ device_stats.total }}</h3>
                        <small class="text-success">
                            <i data-lucide="trending-up" class="me-1" style="width: 12px; height: 12px;"></i>
                            {{ device_stats.online_percentage }}% online
                        </small>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <div class="col-xl-3 col-md-6">
        <div class="card border-0 shadow-sm">
            <div class="card-body">
                <div class="d-flex align-items-center">
                    <div class="flex-shrink-0">
                        <div class="bg-primary bg-opacity-10 p-3 rounded">
                            <i data-lucide="wifi" class="text-primary"></i>
                        </div>
                    </div>
                    <div class="flex-grow-1 ms-3">
                        <h6 class="card-subtitle text-muted mb-1">Online Devices</h6>
                        <h3 class="card-title mb-0 text-success">{{ device_stats.online }}</h3>
                        <small class="text-muted">{{ device_stats.offline }} offline</small>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <div class="col-xl-3 col-md-6">
        <div class="card border-0 shadow-sm">
            <div class="card-body">
                <div class="d-flex align-items-center">
                    <div class="flex-shrink-0">
                        <div class="bg-warning bg-opacity-10 p-3 rounded">
                            <i data-lucide="activity" class="text-warning"></i>
                        </div>
                    </div>
                    <div class="flex-grow-1 ms-3">
                        <h6 class="card-subtitle text-muted mb-1">System Health</h6>
                        <h3 class="card-title mb-0">{{ health_metrics.cpu_usage }}%</h3>
                        <small class="text-muted">CPU Usage</small>
                    </div>
                </div>
            </div>
        </div>
    </div>
    
    <div class="col-xl-3 col-md-6">
        <div class="card border-0 shadow-sm">
            <div class="card-body">
                <div class="d-flex align-items-center">
                    <div class="flex-shrink-0">
                        <div class="bg-info bg-opacity-10 p-3 rounded">
                            <i data-lucide="clock" class="text-info"></i>
                        </div>
                    </div>
                    <div class="flex-grow-1 ms-3">
                        <h6 class="card-subtitle text-muted mb-1">Avg Response</h6>
                        <h3 class="card-title mb-0">{{ health_metrics.network_latency }}ms</h3>
                        <small class="text-muted">Network latency</small>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Charts Row -->
<div class="row g-4 mb-4">
    <div class="col-lg-8">
        <div class="card border-0 shadow-sm">
            <div class="card-header bg-transparent border-0 pb-0">
                <h5 class="card-title mb-0">Operations Timeline</h5>
                <p class="card-text text-muted">Recent network operations over time</p>
            </div>
            <div class="card-body">
                <canvas id="operations-timeline-chart" height="300"></canvas>
            </div>
        </div>
    </div>
    
    <div class="col-lg-4">
        <div class="card border-0 shadow-sm">
            <div class="card-header bg-transparent border-0 pb-0">
                <h5 class="card-title mb-0">Device Status</h5>
                <p class="card-text text-muted">Current device status distribution</p>
            </div>
            <div class="card-body">
                <canvas id="device-status-chart" height="250"></canvas>
            </div>
        </div>
    </div>
</div>

<!-- Recent Operations -->
<div class="row">
    <div class="col-12">
        <div class="card border-0 shadow-sm">
            <div class="card-header bg-transparent border-0 d-flex justify-content-between align-items-center">
                <div>
                    <h5 class="card-title mb-0">Recent Operations</h5>
                    <p class="card-text text-muted mb-0">Latest network operations and their status</p>
                </div>
                <a href="{{ url_for('operations.index') }}" class="btn btn-outline-primary btn-sm">
                    View All
                    <i data-lucide="arrow-right" class="ms-1"></i>
                </a>
            </div>
            <div class="card-body p-0">
                <div class="table-responsive">
                    <table class="table table-hover mb-0">
                        <thead class="table-light">
                            <tr>
                                <th>Operation</th>
                                <th>Device</th>
                                <th>Status</th>
                                <th>Duration</th>
                                <th>Time</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            {% for operation in recent_operations %}
                            <tr>
                                <td>
                                    <div class="d-flex align-items-center">
                                        <div class="flex-shrink-0 me-2">
                                            {% if operation.operation_type == 'config_backup' %}
                                                <i data-lucide="download" class="text-primary"></i>
                                            {% elif operation.operation_type == 'connectivity_test' %}
                                                <i data-lucide="wifi" class="text-info"></i>
                                            {% else %}
                                                <i data-lucide="settings" class="text-secondary"></i>
                                            {% endif %}
                                        </div>
                                        <div>
                                            <div class="fw-medium">{{ operation.operation_type.replace('_', ' ').title() }}</div>
                                            {% if operation.command %}
                                                <small class="text-muted">{{ operation.command[:50] }}...</small>
                                            {% endif %}
                                        </div>
                                    </div>
                                </td>
                                <td>
                                    <span class="badge bg-light text-dark">{{ operation.device.name if operation.device else 'System' }}</span>
                                </td>
                                <td>
                                    {% if operation.status == 'success' %}
                                        <span class="badge bg-success">Success</span>
                                    {% elif operation.status == 'failed' %}
                                        <span class="badge bg-danger">Failed</span>
                                    {% elif operation.status == 'running' %}
                                        <span class="badge bg-primary">Running</span>
                                    {% else %}
                                        <span class="badge bg-warning">{{ operation.status.title() }}</span>
                                    {% endif %}
                                </td>
                                <td>
                                    {% if operation.execution_time_ms %}
                                        {{ operation.execution_time_ms }}ms
                                    {% else %}
                                        -
                                    {% endif %}
                                </td>
                                <td>
                                    <span class="text-muted" title="{{ operation.created_at.strftime('%Y-%m-%d %H:%M:%S') }}">
                                        {{ operation.created_at.strftime('%H:%M') }}
                                    </span>
                                </td>
                                <td>
                                    <button class="btn btn-sm btn-outline-secondary" 
                                            onclick="viewOperationDetails('{{ operation.id }}')">
                                        <i data-lucide="eye" style="width: 14px; height: 14px;"></i>
                                    </button>
                                </td>
                            </tr>
                            {% endfor %}
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Quick Action Modal -->
<div class="modal fade" id="quick-action-modal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Quick Actions</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="d-grid gap-2">
                    <button class="btn btn-outline-primary" onclick="runQuickAction('backup-all')">
                        <i data-lucide="download" class="me-2"></i>
                        Backup All Configurations
                    </button>
                    <button class="btn btn-outline-info" onclick="runQuickAction('health-check')">
                        <i data-lucide="activity" class="me-2"></i>
                        Run Health Check
                    </button>
                    <button class="btn btn-outline-success" onclick="runQuickAction('connectivity-test')">
                        <i data-lucide="wifi" class="me-2"></i>
                        Test All Connectivity
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block scripts %}
<script>
// Dashboard JavaScript functionality
class NetworkDashboard {
    constructor() {
        this.initializeCharts();
        this.setupEventListeners();
        this.startAutoRefresh();
    }
    
    initializeCharts() {
        // Device Status Chart
        fetch('/api/device-status-chart')
            .then(response => response.json())
            .then(data => {
                const ctx = document.getElementById('device-status-chart').getContext('2d');
                new Chart(ctx, {
                    type: 'doughnut',
                    data: {
                        labels: data.labels,
                        datasets: [{
                            data: data.data,
                            backgroundColor: data.backgroundColor,
                            borderWidth: 2,
                            borderColor: '#ffffff'
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: {
                                position: 'bottom'
                            }
                        }
                    }
                });
            })
            .catch(error => console.error('Error loading device status chart:', error));
        
        // Operations Timeline Chart
        fetch('/api/operations-timeline')
            .then(response => response.json())
            .then(data => {
                const ctx = document.getElementById('operations-timeline-chart').getContext('2d');
                new Chart(ctx, {
                    type: 'line',
                    data: {
                        labels: data.labels,
                        datasets: [{
                            label: 'Operations',
                            data: data.data,
                            borderColor: '#0d6efd',
                            backgroundColor: 'rgba(13, 110, 253, 0.1)',
                            tension: 0.4,
                            fill: true
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        scales: {
                            y: {
                                beginAtZero: true,
                                ticks: {
                                    stepSize: 1
                                }
                            }
                        },
                        plugins: {
                            legend: {
                                display: false
                            }
                        }
                    }
                });
            })
            .catch(error => console.error('Error loading operations timeline chart:', error));
    }
    
    setupEventListeners() {
        document.getElementById('refresh-dashboard').addEventListener('click', () => {
            this.refreshDashboard();
        });
    }
    
    refreshDashboard() {
        window.location.reload();
    }
    
    startAutoRefresh() {
        // Auto-refresh every 30 seconds
        setInterval(() => {
            this.updateStats();
        }, 30000);
    }
    
    updateStats() {
        fetch('/api/stats')
            .then(response => response.json())
            .then(data => {
                // Update statistics cards
                console.log('Stats updated:', data);
            })
            .catch(error => console.error('Error updating stats:', error));
    }
}

// Quick Actions
function runQuickAction(action) {
    const modal = bootstrap.Modal.getInstance(document.getElementById('quick-action-modal'));
    modal.hide();
    
    NetworkApp.showToast(`Running ${action.replace('-', ' ')}...`, 'info');
    
    // Implement actual quick actions here
    setTimeout(() => {
        NetworkApp.showToast(`${action.replace('-', ' ')} completed successfully!`, 'success');
    }, 2000);
}

function viewOperationDetails(operationId) {
    // Implement operation details view
    NetworkApp.showToast('Operation details feature coming soon...', 'info');
}

// Initialize dashboard when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
    new NetworkDashboard();
});
</script>
{% endblock %}
```

### 7.3 Main JavaScript (static/js/app.js)

```javascript
// Main application JavaScript
class NetworkApp {
    constructor() {
        this.socket = null;
        this.initializeSocket();
        this.setupGlobalEventListeners();
    }
    
    initializeSocket() {
        if (typeof io !== 'undefined') {
            this.socket = io();
            
            this.socket.on('connect', () => {
                console.log('Connected to server');
            });
            
            this.socket.on('disconnect', () => {
                console.log('Disconnected from server');
            });
            
            this.socket.on('notification', (data) => {
                this.showToast(data.message, data.type || 'info');
            });
        }
    }
    
    setupGlobalEventListeners() {
        // Handle AJAX forms
        document.addEventListener('submit', (e) => {
            if (e.target.classList.contains('ajax-form')) {
                e.preventDefault();
                this.handleAjaxForm(e.target);
            }
        });
        
        // Handle confirmable actions
        document.addEventListener('click', (e) => {
            if (e.target.closest('[data-confirm]')) {
                const element = e.target.closest('[data-confirm]');
                const message = element.getAttribute('data-confirm');
                
                if (!confirm(message)) {
                    e.preventDefault();
                    return false;
                }
            }
        });
    }
    
    handleAjaxForm(form) {
        const formData = new FormData(form);
        const url = form.action;
        const method = form.method || 'POST';
        
        fetch(url, {
            method: method,
            body: formData,
            headers: {
                'X-Requested-With': 'XMLHttpRequest'
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                this.showToast(data.message || 'Operation completed successfully', 'success');
                if (data.redirect) {
                    window.location.href = data.redirect;
                }
            } else {
                this.showToast(data.error || 'An error occurred', 'error');
            }
        })
        .catch(error => {
            console.error('AJAX form error:', error);
            this.showToast('An unexpected error occurred', 'error');
        });
    }
    
    static showToast(message, type = 'info') {
        const toastContainer = document.getElementById('toast-container');
        if (!toastContainer) return;
        
        const toastId = 'toast-' + Date.now();
        const iconMap = {
            success: 'check-circle',
            error: 'x-circle',
            warning: 'alert-triangle',
            info: 'info'
        };
        
        const colorMap = {
            success: 'text-bg-success',
            error: 'text-bg-danger',
            warning: 'text-bg-warning',
            info: 'text-bg-primary'
        };
        
        const toastHtml = `
            <div id="${toastId}" class="toast ${colorMap[type]}" role="alert" aria-live="assertive" aria-atomic="true">
                <div class="toast-header ${colorMap[type]}">
                    <i data-lucide="${iconMap[type]}" class="me-2" style="width: 16px; height: 16px;"></i>
                    <strong class="me-auto">${type.charAt(0).toUpperCase() + type.slice(1)}</strong>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="toast"></button>
                </div>
                <div class="toast-body">
                    ${message}
                </div>
            </div>
        `;
        
        toastContainer.insertAdjacentHTML('beforeend', toastHtml);
        
        const toastElement = document.getElementById(toastId);
        const toast = new bootstrap.Toast(toastElement, {
            autohide: true,
            delay: 5000
        });
        
        toast.show();
        
        // Update icons
        lucide.createIcons();
        
        // Remove toast element after it's hidden
        toastElement.addEventListener('hidden.bs.toast', () => {
            toastElement.remove();
        });
    }
    
    static makeApiCall(url, options = {}) {
        const defaultOptions = {
            headers: {
                'Content-Type': 'application/json',
                'X-Requested-With': 'XMLHttpRequest'
            }
        };
        
        return fetch(url, { ...defaultOptions, ...options })
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                return response.json();
            });
    }
    
    static formatDateTime(dateString) {
        const date = new Date(dateString);
        return date.toLocaleString();
    }
    
    static formatTimeAgo(dateString) {
        const date = new Date(dateString);
        const now = new Date();
        const diffMs = now - date;
        const diffSecs = Math.floor(diffMs / 1000);
        const diffMins = Math.floor(diffSecs / 60);
        const diffHours = Math.floor(diffMins / 60);
        const diffDays = Math.floor(diffHours / 24);
        
        if (diffDays > 0) return `${diffDays}d ago`;
        if (diffHours > 0) return `${diffHours}h ago`;
        if (diffMins > 0) return `${diffMins}m ago`;
        return 'Just now';
    }
}

// Initialize app when DOM is ready
document.addEventListener('DOMContentLoaded', () => {
    window.NetworkApp = new NetworkApp();
});

// Global utility functions
window.showToast = NetworkApp.showToast;
window.makeApiCall = NetworkApp.makeApiCall;
```

## 8. DETAILED IMPLEMENTATION GUIDE

### 8.1 Authentication Implementation
1. **User Registration/Login**: Use Flask-Login with password hashing
2. **Session Management**: Server-side sessions with Flask-Session
3. **JWT Tokens**: For API authentication using Flask-JWT-Extended
4. **Role-Based Access**: Implement role decorators for different user levels

### 8.2 Device Management Implementation
1. **SSH Connectivity**: Use Paramiko for SSH connections to devices
2. **SNMP Monitoring**: Implement SNMP polling for device status
3. **Configuration Backup**: Automated config retrieval and storage
4. **Real-time Status**: WebSocket updates for device status changes

### 8.3 AI Integration Implementation
1. **OpenAI Integration**: GPT-4 for configuration generation and chat
2. **Anthropic Integration**: Claude as fallback AI provider
3. **Context Management**: Maintain conversation history and system context
4. **RAG Implementation**: Vector database for documentation retrieval

### 8.4 Real-time Features Implementation
1. **WebSocket Server**: Flask-SocketIO for real-time communication
2. **Live Updates**: Device status, operations, and chat messages
3. **Background Tasks**: Celery for long-running operations
4. **Notifications**: Real-time alerts and status updates

### 8.5 Database Performance
1. **Indexing Strategy**: Optimize queries with proper indexes
2. **Connection Pooling**: Use SQLAlchemy connection pooling
3. **Query Optimization**: Implement efficient query patterns
4. **Caching**: Redis for session and data caching

## 9. DEPLOYMENT CONSIDERATIONS

### 9.1 Production Setup
- **Web Server**: Gunicorn with Nginx reverse proxy
- **Database**: PostgreSQL with proper backup strategy
- **Redis**: For session storage and Celery task queue
- **SSL/TLS**: HTTPS with proper certificate management
- **Environment Variables**: Secure configuration management

### 9.2 Monitoring and Logging
- **Application Logging**: Structured logging with proper levels
- **Database Monitoring**: Query performance and connection tracking
- **Error Tracking**: Integration with error tracking services
- **Health Checks**: Automated health monitoring endpoints

This PRD provides a complete blueprint for recreating the Network Automation Platform using Python technologies while maintaining 100% of the original functionality and user experience.